{% extends "base.html.twig" %}

{% block title %}Metrics{% endblock %}

{% block main %}
    <div class="main">
        <h1>Metrics analys</h1>
        <div class="grid">
            <div class="span13">
                <h2>Introduktion</h2>
                <hr>
                <div class="txt">
                    <p>
                        Syftet med denna uppgift är att jag som programmerare ska analysera min kodkvalitet med hjälp av 
                        phpmetrics och scrutinizer. Under analysen så ska jag identifiera förbättringsmöjligeheter i min kod
                        och efteråt så ska jag se till att tillämpa dem förbättringar i koden. Jag kommer att förhålla mig till
                        6 C:na som är Codestyle, Coverage, Complexity, Cohesion, Coupling och CRAP under tiden jag analyser och 
                        förbättrar koden.
                    </p>
                    <h3>Codestyle</h3>
                    <p>
                        Codestyle handlar om formatering av koden och om hur koden är skriven så att andra som läser det
                        kan lätt förstå det. En bra kodstil innehåller saker som relevantra kommentar, indenteringar,
                        mellanrum och tydliga namn för variabler/klasser/metoder. Detta göt det enklare för andra som läser
                        koden att förstå vad som sker och även underhålla koden.  
                    </p>
                    <h3>Coverage</h3>
                    <p>
                        Coverage handlar om hur mycket av koden som har testats. Högt coverage betyder generellt att
                        fler delar av koden har testats. Detta innebär mindre risk för sånt som tex buggar.
                    </p>
                    <h3>Complexity</h3>
                    <p>
                        Complexity handlar om komplexiteten i koden, i mitt fall så mäts det med cyclomatic complexity och 
                        generellt så innebär lägre cyclomatic complexity att koden är lättförståeligt och enkelt att underhålla.
                    </p>
                    <h3>Cohesion</h3>
                    <p>
                        Cohesion handlar om hur relaterade klasser eller metoder är till varandra. generellt så vill man ha
                        hög Cohesion i och med att det visar att varje klass/metod har ett syfte, detta gör det att förstå och
                        felsöka koden.
                    </p>
                    <h3>Coupling</h3>
                    <p>
                        Coupling handlar om hur beroende moduler och/eller klasser är av varandra, en Låg Coupling betyder att 
                        moduler eller klasser är oberoende av varandra. Vilket betyder att koden är flexibel och delar av det
                        kan ändras utan att andra påverkas.
                    </p>
                    <h3>CRAP</h3>
                    <p>
                        CRAP kombinerar Coverage och Complexity för att identifiera område i koden som kan introducera buggar
                        ifall en ändring hade sket. generellt så vill man ha så lite CRAP poäng som möjligt ioc att hög crap
                        innebär att koden kanske borde omkonstrueras.
                    </p>
                </div>
            </div>

            <div class="span13">
                <h2>Phpmetrics</h2>
                <hr>
                <div class="txt">
                    <h3>Bilder:</h3>
                    <p>
                        bild 1:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/overal.png') }}">
                            <img src="{{ asset('img/overal.png') }}" alt="overal">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 2:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/complexity.png') }}">
                            <img src="{{ asset('img/complexity.png') }}" alt="complexity">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 3:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/avarage.png') }}">
                            <img src="{{ asset('img/avarage.png') }}" alt="avarage">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 4:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/allcomp.png') }}">
                            <img src="{{ asset('img/allcomp.png') }}" alt="allcomplexity">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 5:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/test.png') }}">
                            <img src="{{ asset('img/test.png') }}" alt="test">
                        </a>
                    </div>
                </div>
                
                <h3>Analys av Metrics</h3>
                <div class="txt">
                    <p>
                        generellt så tycker jag att resultaten från Metrics ser helt ok ut. Som man kan se på bild 1
                        så finns det inga alvarliga "Violations", snitt cyclomatic complexity per class 
                        ligger på 4.5 vilket jag är nöjd med och snitt buggar per class är under 1.  
                    </p>
                    <br>
                    <p>
                        Kikar man lite närmare på testerna så kan man snabbt konstantera att trots att snitt cyclomatic
                        complexity och buggar ligger på en bra nivå så finns det classer som ändå visar röd på 
                        "Maintainability/complexity" och som har cyclomatic complexity över 10 per class.
                    </p>
                    <br>
                    <p>
                        Vi kan också se att det är bara 8 av 18 klasser som har testats. Det är värt att notera att
                        en av den otestade klass är den som har högs cyclomatic complexity och högst buggar. Baserat på
                        testerna så skulle jag säga att dem två område som är värt att fokusera på att förbättra är 
                        Coverage och Complexity. Detta kommer i sin tur att ta ner CRAP och föränkla koden.
                    </p>
                </div>
            </div>

            <div class="span13">
                <h2>Scrutinizer</h2>
                <hr>
                <div class="txt">
                    <h3>Bilder:</h3>
                    <p>
                        bild 1:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/results.png') }}">
                            <img src="{{ asset('img/results.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 2:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/scrutt.png') }}">
                            <img src="{{ asset('img/scrutt.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 3:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/scruts.png') }}">
                            <img src="{{ asset('img/scruts.png') }}" alt="test">
                        </a>
                    </div>
                    <h3>Badges</h3>
                    <p>
                        <a href=
                        "https://scrutinizer-ci.com/g/teophilsimao/report/inspections/69192905-8b7e-4e2d-8acf-c791ce97416a/log">
                        <img src="https://scrutinizer-ci.com/g/teophilsimao/report/badges/build.png?b=main" alt="Build Status">
                        </a>

                        <a href=
                        "https://scrutinizer-ci.com/g/teophilsimao/report/">
                        <img src="https://scrutinizer-ci.com/g/teophilsimao/report/badges/coverage.png?b=main" alt="Coverage Status">
                        </a>

                        <a href=
                        "https://scrutinizer-ci.com/g/teophilsimao/report/">
                        <img src="https://scrutinizer-ci.com/g/teophilsimao/report/badges/quality-score.png?b=main" alt="Scrutinizer Status">
                        </a>

                        <a href=
                        "https://scrutinizer-ci.com/g/teophilsimao/report/">
                        <img src="https://scrutinizer-ci.com/g/teophilsimao/report/badges/code-intelligence.svg?b=main" alt="code intelligence Status">
                        </a>
                    </p>
                </div>
                <h3>Analys av Scrutinizer</h3>
                <div class="txt">
                    <p>
                        Lite som på metrics så kan vi se att det störta problem med koden är att det är ganska mycket avs koden som
                        är otestad och på majoriteten av dem otestade koderna så kan vi kosntantera att både komplexiteten och CRAP 
                        är väldigt högt på dem.
                    </p>
                    <br>
                    <p>
                        Precis som på Metrics så tycker jag att förbättringar kan göras både när det gäller cyclomatic complexity 
                        och coverage. Vilket i sin tur can leda till lägre CRAP score.
                    </p>
                </div>
            </div>

            <div class="span13">
                <h2>Förbättringar</h2>
                <hr>
                <div class="txt">
                    <p>
                        Baserad på analys från metrics och scrutinizer så kommer jag att försöka förbättra coverage, 
                        cyclomatic complexity
                        och CRAP i min kod. Jag välje just dem område eftersom jag tycker att det är viktigt med låg cyclomatic complexity
                        då det kan göra det enklare för ändring, coverage eftersom jag vill se till att klasserna som inporteras i Controller
                        fungerar som det ska ocg CRAP eftersom det också föränklar koden och hur lätt det blit att förstå och förändra koden.
                    </p>
                    <br>
                    <p>
                        Jag kommer att försöka förbättra cyclomatic complexity genom att dela upp koder lite mer och generellt
                        förenkla koden, mitt mål är att det ska ligga som högst på 15 i varje klass. För coverage kommer jag att
                        göra mer enhetestester, målet är att alla klasser som är utanför Controller ska testat. 
                        Jag kommer även att fokusera på att dra ner CRAP 
                        så att alla metoder har som högst 20, gul, i CRAP poäng.
                    </p>
                    <h3>Bilder:</h3>
                    <p>
                        bild 1:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/metrics0.png') }}">
                            <img src="{{ asset('img/metrics0.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 2:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/metrics1.png') }}">
                            <img src="{{ asset('img/metrics1.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 3:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/metrics2.png') }}">
                            <img src="{{ asset('img/metrics2.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 4:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/metrics3.png') }}">
                            <img src="{{ asset('img/metrics3.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 5:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/scrut0.png') }}">
                            <img src="{{ asset('img/scrut0.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 6:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/scrut1.png') }}">
                            <img src="{{ asset('img/scrut1.png') }}" alt="test">
                        </a>
                    </div>
                    <br>
                    <p>
                        bild 7:
                    </p>
                    <div class="bild wgt">
                        <a href="{{ asset('img/scrut2.png') }}">
                            <img src="{{ asset('img/scrut2.png') }}" alt="test">
                        </a>
                    </div>
                    <h3>Analys</h3>
                    <p>
                        Efter att ha kämpat med att dra ner cyclomatic complexity och öka coverage så kan vi se att 
                        det inte bara de två område som har förbättras. Dels så har CRAP minskats i varje method, den högsta
                        CRAP var 72, röd, innan förbättring och nu ligger den hösta på 20, gul. Förutom det så kan vi även 
                        se att antal buggar per klass har minskat, scrutinizer poängen har gått upp till 10, antal "error" i
                        koden är 0 och att antal linjer har minskats. 
                    </p>
                    <br>
                    <p>
                        Jag har även tagit med en mättning av Coupling från phpmetrics som jag gömde att inkludera innan förbättringen
                        mätningen visar hur classerna är beroende av varandra och enligt mig så ser det gfanska logiskt ut. Småa
                        klasser så som Card, CardDraw effekterar större klasser där allt inporteras in medans större klasser inte effekterar
                        små klasser.
                    </p>
                </div>
            </div>

            <div class="span13">
                <h2>Diskussion</h2>
                <hr>
                <div class="txt">
                    <h3>Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?</h3>
                    <p>
                        Det tycker jag att man ska kunna, både phpmetrics och scrutinizer kan användas för att mäta
                        och analyser kvaliteten på koden. Verktygen är lättanvänt och ger tydlig bild över vad som
                        kan förbättras i koden och varför. 
                    </p>
                    <h3>Finns det fördelar och kanske nackdelar?</h3>
                    <p>
                        Den största fördelen enligt mig skulle varaden automatiserad analys som gör att allt känns så enkelt
                        och inte tidskrävande alls. Några till fördelar är att man får en tydligt bild över vad problemet är
                        i form av digramer eller metrics och dessutom så lär man sig mycket under tiden man förbättrar sin kod.
                    </p>
                    <br>
                    <p>
                        Den enda nackdelen jag kan komma på är att det är automatiserad och inte kan eresätta i människas bedömning.
                    </p>
                    <h3>Ser du andra möjligheter att jobba mot “clean code”?</h3>
                    <p>
                        Det finns andra möjligheter så som att få feedback från kollegor/lärare, eller att man använder sig av linters
                        som tex csfixer. Men jag tycker att sättet som användes i detta kmom är den mest effektiva. 
                    </p>
                </div>
            </div>
        </div>
    </div>
{% endblock %}